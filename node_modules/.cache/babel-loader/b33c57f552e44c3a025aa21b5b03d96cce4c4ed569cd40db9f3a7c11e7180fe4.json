{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Grid from \"vue-virtual-scroll-grid\";\nimport axios from \"axios\";\nimport { useRouter } from 'vue-router';\nexport default {\n  name: \"Home\",\n  components: {\n    Grid\n  },\n  data() {\n    return {\n      products: [],\n      router: useRouter()\n    };\n  },\n  methods: {\n    // Fetch products from the API\n    fetchProducts() {\n      axios.get(\"http://127.0.0.1:5000/api/products\").then(response => {\n        this.products = response.data;\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    openProduct(product) {\n      console.log(product.id);\n      this.router.push({\n        name: 'ProductView',\n        params: {\n          id: product.id\n        }\n      });\n    },\n    // Return items for the given page\n    pageProvider(pageNumber, pageSize) {\n      const start = (pageNumber - 1) * pageSize;\n      const end = start + pageSize;\n      return Promise.resolve(this.products.slice(start, end));\n    },\n    // Add product to cart\n    addToCart(product) {\n      const existingItem = this.$store.state.cartItems.find(item => item.id === product.id);\n      if (existingItem) {\n        // Item already exists in cart, increment quantity\n        this.$store.commit('incrementCartItemQuantity', existingItem.id);\n      } else {\n        // Item doesn't exist in cart, add as new item\n        const cartItem = {\n          id: product.id,\n          name: product.Name,\n          price: product.Price,\n          quantity: 1\n        };\n        this.$store.commit('addToCart', cartItem);\n      }\n    }\n  },\n  mounted() {\n    this.fetchProducts();\n  }\n};","map":{"version":3,"names":["Grid","axios","useRouter","name","components","data","products","router","methods","fetchProducts","get","then","response","catch","error","console","openProduct","product","log","id","push","params","pageProvider","pageNumber","pageSize","start","end","Promise","resolve","slice","addToCart","existingItem","$store","state","cartItems","find","item","commit","cartItem","Name","price","Price","quantity","mounted"],"sources":["/home/sezfabian/Devs/The_Tv_Guys/web_app/src/components/vue-products-grid-master/ProductsGrid.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <Grid :length=\"products.length\" :pageSize=\"10\" :pageProvider=\"pageProvider\" class=\"grid\">\r\n      <template v-slot:placeholder=\"{ style, index }\">\r\n        <div class=\"item\" :style=\"style\">\r\n          <img :src=\"products[index].Image\" alt=\"https://i.postimg.cc/jdCTJHbh/placeholder-image.png\" class=\"product-image\" @click=\"openProduct(products[index])\"/>\r\n          <h2 @click=\"openProduct(products[index])\">{{ products[index].Name }}</h2>\r\n          <div class=\"product-price\">Ksh {{ products[index].Price }}</div>\r\n          <button @click=\"addToCart(products[index])\">Add to Cart</button>\r\n        </div>\r\n      </template>\r\n    </Grid>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Grid from \"vue-virtual-scroll-grid\";\r\nimport axios from \"axios\";\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n  name: \"Home\",\r\n  components: { Grid },\r\n  data() {\r\n    return {\r\n      products: [],\r\n      router: useRouter()\r\n    };\r\n  },\r\n  methods: {\r\n    // Fetch products from the API\r\n    fetchProducts() {\r\n      axios\r\n        .get(\"http://127.0.0.1:5000/api/products\")\r\n        .then(response => {\r\n          this.products = response.data;\r\n        })\r\n        .catch(error => {\r\n          console.error(error);\r\n        });\r\n    },\r\n    openProduct(product) {\r\n      console.log(product.id)\r\n      this.router.push({ name: 'ProductView', params: { id: product.id } });\r\n    },\r\n    // Return items for the given page\r\n    pageProvider(pageNumber, pageSize) {\r\n      const start = (pageNumber - 1) * pageSize;\r\n      const end = start + pageSize;\r\n      return Promise.resolve(this.products.slice(start, end));\r\n    },\r\n    // Add product to cart\r\n    addToCart(product) {\r\n      const existingItem = this.$store.state.cartItems.find(item => item.id === product.id);\r\n      if (existingItem) {\r\n        // Item already exists in cart, increment quantity\r\n        this.$store.commit('incrementCartItemQuantity', existingItem.id);\r\n      } else {\r\n        // Item doesn't exist in cart, add as new item\r\n        const cartItem = {\r\n          id: product.id,\r\n          name: product.Name,\r\n          price: product.Price,\r\n          quantity: 1\r\n        };\r\n        this.$store.commit('addToCart', cartItem);\r\n    }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchProducts();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  padding-left: 30px;\r\n  display: absolute;\r\n  left: -20%;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  z-index: 100;\r\n  background-color: aliceblue;\r\n}\r\n\r\n.grid {\r\n  display: grid;\r\n  align-items: center;\r\n  flex-direction: row;\r\n  grid-gap: 10px;\r\n  grid-template-columns: repeat(1, 1fr);\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n}\r\n@media (min-width: 992px) {\r\n  .grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n}\r\n@media (min-width: 1280px) {\r\n  .grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n}\r\n@media (min-width: 1440px) {\r\n  .grid {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n}\r\n@media (min-width: 1650px) {\r\n  .grid {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n}\r\n@media (min-width: 1890px) {\r\n  .grid {\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n}\r\n@media (min-width: 2530px) {\r\n  .grid {\r\n    grid-template-columns: repeat(6, 1fr);\r\n  }\r\n}\r\n\r\n.item {\r\n  background-color: lightgray;\r\n  padding: 20px 20px;\r\n  text-align: center;\r\n  width: 400px;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.item:hover {\r\n  transform: scale(1.2);\r\n}\r\n\r\n.product-item {\r\n  background-color: lightgray;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.product-image {\r\n  width: 100%;\r\n  max-height: 300px;\r\n  object-fit: contain;\r\n}\r\n\r\n.product-details {\r\n  flex-grow: 1;\r\n}\r\n\r\n.product-name {\r\n  font-weight: bold;\r\n}\r\n\r\n.product-price {\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":";AAgBA,OAAOA,IAAG,MAAO,yBAAyB;AAC1C,OAAOC,KAAI,MAAO,OAAO;AACzB,SAASC,SAAQ,QAAS,YAAY;AAEtC,eAAe;EACbC,IAAI,EAAE,MAAM;EACZC,UAAU,EAAE;IAAEJ;EAAK,CAAC;EACpBK,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAEL,SAAS,CAAC;IACpB,CAAC;EACH,CAAC;EACDM,OAAO,EAAE;IACP;IACAC,aAAaA,CAAA,EAAG;MACdR,KAAI,CACDS,GAAG,CAAC,oCAAoC,EACxCC,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACN,QAAO,GAAIM,QAAQ,CAACP,IAAI;MAC/B,CAAC,EACAQ,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB,CAAC,CAAC;IACN,CAAC;IACDE,WAAWA,CAACC,OAAO,EAAE;MACnBF,OAAO,CAACG,GAAG,CAACD,OAAO,CAACE,EAAE;MACtB,IAAI,CAACZ,MAAM,CAACa,IAAI,CAAC;QAAEjB,IAAI,EAAE,aAAa;QAAEkB,MAAM,EAAE;UAAEF,EAAE,EAAEF,OAAO,CAACE;QAAG;MAAE,CAAC,CAAC;IACvE,CAAC;IACD;IACAG,YAAYA,CAACC,UAAU,EAAEC,QAAQ,EAAE;MACjC,MAAMC,KAAI,GAAI,CAACF,UAAS,GAAI,CAAC,IAAIC,QAAQ;MACzC,MAAME,GAAE,GAAID,KAAI,GAAID,QAAQ;MAC5B,OAAOG,OAAO,CAACC,OAAO,CAAC,IAAI,CAACtB,QAAQ,CAACuB,KAAK,CAACJ,KAAK,EAAEC,GAAG,CAAC,CAAC;IACzD,CAAC;IACD;IACAI,SAASA,CAACb,OAAO,EAAE;MACjB,MAAMc,YAAW,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,SAAS,CAACC,IAAI,CAACC,IAAG,IAAKA,IAAI,CAACjB,EAAC,KAAMF,OAAO,CAACE,EAAE,CAAC;MACrF,IAAIY,YAAY,EAAE;QAChB;QACA,IAAI,CAACC,MAAM,CAACK,MAAM,CAAC,2BAA2B,EAAEN,YAAY,CAACZ,EAAE,CAAC;MAClE,OAAO;QACL;QACA,MAAMmB,QAAO,GAAI;UACfnB,EAAE,EAAEF,OAAO,CAACE,EAAE;UACdhB,IAAI,EAAEc,OAAO,CAACsB,IAAI;UAClBC,KAAK,EAAEvB,OAAO,CAACwB,KAAK;UACpBC,QAAQ,EAAE;QACZ,CAAC;QACD,IAAI,CAACV,MAAM,CAACK,MAAM,CAAC,WAAW,EAAEC,QAAQ,CAAC;MAC7C;IACA;EACF,CAAC;EACDK,OAAOA,CAAA,EAAG;IACR,IAAI,CAAClC,aAAa,CAAC,CAAC;EACtB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}